/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

import { getMessaging, onBackgroundMessage } from "firebase/messaging/sw";
import { fbApp } from "./firebase"; // 또는 SW 안에서 initializeApp

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

const messaging = getMessaging(fbApp);

onBackgroundMessage(messaging, async (payload) => {
  const n = payload.notification || {};
  const d = payload.data || {};
  const title = n.title || d.title || "알림";
  const body = n.body || d.body || "";

  await self.registration.showNotification(title, {
    body,
    tag: "push",
    renotify: false,
    data: { ...d },
    icon: "/logo512.png",
    badge: "/logo192.png",
    requireInteraction: false,
  });
});

// 확인용 로직
self.addEventListener("push", (event) => {
  try {
    const raw = event.data ? event.data.text() : null;
    console.log("[SW] push event raw:", raw);
    const json = event.data ? event.data.json() : null;
    console.log("[SW] push event json:", json);
  } catch (e) {
    console.warn("[SW] push event parse error:", e);
  }
});

// 푸시 알림 클릭 로직
self.addEventListener("notificationclick", (event) => {
  event.notification.close();
  event.waitUntil(
    (async () => {
      const allClients = await self.clients.matchAll({
        type: "window",
        includeUncontrolled: true,
      });
      // 열려있는 탭 하나 포커스하거나, 없으면 홈 열기
      const client = allClients[0];
      if (client) {
        await client.focus();
        // client.postMessage({ type: "PUSH_CLICK", data: event.notification.data });
      } else {
        await self.clients.openWindow("/");
      }
    })()
  );
});

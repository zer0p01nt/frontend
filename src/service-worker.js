/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

// FCM 백그라운드 메세지 로직

// 공통 유틸
function extractPayload(event) {
  let payload = {};
  try {
    if (event?.data) {
      try {
        payload = event.data.json();
      } catch {
        payload = { raw: event.data.text() };
      }
    }
  } catch {}
  return payload || {};
}

function buildData(notification, d1) {
  const n = notification || {};
  const d2 = n.data || {};
  const d = { ...d1, ...d2 };
  const docId = d.document_id;
  const path = docId ? `/post/${encodeURIComponent(docId)}` : "/notification";
  const tag = docId ? `doc-${docId}` : "push-default";
  const title = n.title || d.title || "알림";
  const body = n.body || d.body || "";
  const icon = n.icon || "/logo192.png";
  return { d, docId, path, tag, title, body, icon };
}

// fcm 로직 : push로 표시, 백그라운드는 주석 처리
import { fbApp } from "./firebase";
import { getMessaging, onBackgroundMessage } from "firebase/messaging/sw";

const messaging = getMessaging(fbApp);

// onBackgroundMessage(messaging, (payload) => {
//   const n = payload?.notification || {};
//   const d = payload?.data || {};
//   const merged = { ...d, ...(n?.data || {}) };

//   eventWaitUntilPost({ type: "FCM_BG", payload: { notification: n, data: merged } });
// });

function eventWaitUntilPost(message) {
  self.registration?.active;
  self.clients
    .matchAll({ type: "window", includeUncontrolled: true })
    .then((wins) => wins.forEach((w) => w.postMessage(message)));
}

// 포그라운드/백그라운드 모두에서 OS 알림을 확실히 표시
self.addEventListener("push", (event) => {
  const payload = extractPayload(event);
  const n = payload.notification || {};
  const d1 = payload.data || {};
  const { d, docId, path, tag, title, body, icon } = buildData(n, d1);

  // 윈도우 브릿지
  eventWaitUntilPost({
    type: "FCM_PUSH",
    payload: { notification: n, data: d },
  });

  event.waitUntil(
    self.registration.showNotification(title, {
      body,
      icon,
      data: { ...d, docId, path },
      tag,
      renotify: false,
    })
  );
});

self.addEventListener("notificationclick", (event) => {
  event.notification.close();

  const data = event.notification?.data || {};
  const docId = data.document_id;
  const path =
    data.path ||
    (docId ? `/post/${encodeURIComponent(docId)}` : "/notification");

  // 상대경로 → 절대경로로 변환
  const target = new URL(path, self.location.origin).href;

  event.waitUntil(
    clients
      .matchAll({ type: "window", includeUncontrolled: true })
      .then((wins) => {
        for (const w of wins) {
          try {
            const wUrl = new URL(w.url),
              tUrl = new URL(target);
            if (
              wUrl.pathname === tUrl.pathname &&
              wUrl.search === tUrl.search
            ) {
              return w.focus();
            }
          } catch {}
        }
        return clients.openWindow(target);
      })
  );
});
